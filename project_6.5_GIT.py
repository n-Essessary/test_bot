import sqlite3
import requests
import logging
from itertools import permutations
import time
import datetime as dt
from datetime import datetime
import json
import websockets
import threading
import ssl
import certifi
import asyncio
import hmac
import base64
import traceback
import os
import math
import sys



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="debug_log.txt",
    filemode="w",
    level=logging.ERROR,  # –û—Å—Ç–∞–≤–ª—è–µ–º DEBUG, –Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ª–∏—à–Ω–µ–µ
    format="%(asctime)s - %(levelname)s - %(message)s"
)


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
OKX_API_TRADE = "https://www.okx.com"
OKX_PRIVAT_URL = "wss://ws.okx.com:8443/ws/v5/private"
OKX_WS_URL = "wss://ws.okx.com:8443/ws/v5/public"
OKX_API_URL = "https://www.okx.com/api/v5"
INITIAL_BALANCE = 1000  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
UPDATE_INTERVAL = 1  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
TARGET_CURRENCIES = {"USDT", "USDC"}  # –¢–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
TARGET_CURRENCIES2 = {"BTC", "ETH", "SOL", "OKB", "BCH", "BSV", "LTC"}
TARGET_CURRENCIES_DEF = {"USDT", "USDC", "BTC", "ETH"}
EXCLUDED_CURRENCIES = {"USD", "UAH", "EUR", "JPY", "CNY", "GBP", "CHF", "AUD", "CAD", "BRL", "SGD", "HKD", "KRW", "RUB", "INR", "MXN", "TRY", "AED"}  # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã
PROFIT_PERCENT = 1010
ORDER_SIZE = 5
MIN_TRADE_SIZE = 0.0001  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
TICK_SIZE = 0.0001  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è

# üîπ –û–∫—Ä—É–≥–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ –ø–æ `TICK_SIZE`
def round_to_tick_size(amount):
    return math.floor(amount / TICK_SIZE) * TICK_SIZE

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ê–ü–ò –∫–ª—é—á –∏–∑ txt —Ñ–∞–π–ª–∞
def load_api_keys():
    with open("api_keys.txt", "r") as f:
        api_key = f.readline().strip()
        api_secret = f.readline().strip()
        passphrase = f.readline().strip()  
    return api_key, api_secret, passphrase

def generate_signature(timestamp, method, path, body, secret_key):
    """ –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å—å HMAC –¥–ª—è WebSocket-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ OKX. """
    message = f"{timestamp}{method}{path}{body}"
    signature = hmac.new(secret_key.encode(), message.encode(), digestmod="sha256").digest()
    return base64.b64encode(signature).decode()

# –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite
conn = sqlite3.connect("arbitrage.db", check_same_thread=False)
cursor = conn.cursor()

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SQLite
cursor.execute("PRAGMA journal_mode=WAL;")
cursor.execute("PRAGMA synchronous=NORMAL;")

# –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS tab_1 (
    pair TEXT PRIMARY KEY,
    bid_price REAL DEFAULT NULL,
    ask_price REAL DEFAULT NULL
);
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS tab_2 (
    pair1 TEXT,
    pair2 TEXT,
    pair3 TEXT,
    bid1 REAL DEFAULT NULL,
    ask1 REAL DEFAULT NULL,
    bid1_volume REAL DEFAULT NULL,
    ask1_volume REAL DEFAULT NULL,
    bid2 REAL DEFAULT NULL,
    ask2 REAL DEFAULT NULL,
    bid2_volume REAL DEFAULT NULL,
    ask2_volume REAL DEFAULT NULL,
    bid3 REAL DEFAULT NULL,
    ask3 REAL DEFAULT NULL,
    bid3_volume REAL DEFAULT NULL,
    ask3_volume REAL DEFAULT NULL
);
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS tab_3 (
    pair1 TEXT,
    bid1 REAL,
    ask1 REAL,
    pair2 TEXT,
    bid2 REAL,
    ask2 REAL,
    pair3 TEXT,
    bid3 REAL,
    ask3 REAL,
    final_balance REAL
);
""")

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
cursor.execute("""
CREATE TABLE IF NOT EXISTS balances (
    currency TEXT PRIMARY KEY,
    available REAL,
    reserved REAL
);
""")

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤
cursor.execute("""
CREATE TABLE IF NOT EXISTS open_orders (
    order_id TEXT PRIMARY KEY,
    pair TEXT,
    type TEXT,
    price REAL,
    quantity REAL,
    created_at TIMESTAMP
);
""")
cursor.execute("DELETE FROM open_orders")
conn.commit()
conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —É OKX
def fetch_trading_pairs():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã —É OKX –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö –≤ `tab_1`."""
    logging.info("–ó–∞–ø—Ä–æ—Å —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —É OKX")
    response = requests.get(f"{OKX_API_URL}/public/instruments?instType=SPOT")
    data = response.json()
    
    if "data" not in data:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö")
        return []
    
    pairs = [(item["instId"], None, None) for item in data["data"]]

    with sqlite3.connect("arbitrage.db") as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM tab_1")
        cursor.executemany("INSERT INTO tab_1 (pair, bid_price, ask_price) VALUES (?, ?, ?)", pairs)
        conn.commit()

    print("‚úÖ –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ tab_1.")
    return [p[0] for p in pairs]

def find_triangular_arbitrage():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö –≤ tab_2."""
    conn = sqlite3.connect("arbitrage.db")  # ‚úÖ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    cursor = conn.cursor()
    cursor.execute("DELETE FROM tab_2")
    cursor.execute("SELECT pair FROM tab_1")
    pairs = [row[0] for row in cursor.fetchall()]

    currencies = set()
    pair_map = {}

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–≤—è–∑–∏ –≤–∞–ª—é—Ç
    for pair in pairs:
        base, quote = pair.split("-")
        if base in EXCLUDED_CURRENCIES or quote in EXCLUDED_CURRENCIES:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        currencies.update([base, quote])
        pair_map.setdefault(base, []).append(quote)
        pair_map.setdefault(quote, []).append(base)

    triangles = []

    # –ü–æ–∏—Å–∫ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
    for a, b, c in permutations(currencies, 3):
        if b in pair_map[a] and c in pair_map[b] and a in pair_map[c] and c in TARGET_CURRENCIES_DEF:
            pair1 = f"{a}-{b}" if f"{a}-{b}" in pairs else f"{b}-{a}"
            pair2 = f"{b}-{c}" if f"{b}-{c}" in pairs else f"{c}-{b}"
            pair3 = f"{c}-{a}" if f"{c}-{a}" in pairs else f"{a}-{c}"
            
            if not (pair1 in pairs and pair2 in pairs and pair3 in pairs):
                continue
            
            triangles.append((pair1, pair2, pair3))

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏ –≤ –±–∞–∑—É
    cursor.executemany("INSERT INTO tab_2 (pair1, pair2, pair3) VALUES (?, ?, ?)", triangles)
    conn.commit()
    conn.close()    # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(triangles)} —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ tab_2.")


def filter_triangles():
    #–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å—Ç–∏–º –ª–æ–≥ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π
    with open("arbitrage_log.txt", "a") as log_file:
        log_file.truncate(0)
    logging.info("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º")
    conn = sqlite3.connect("arbitrage.db")  # ‚úÖ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    cursor = conn.cursor()
    cursor.execute("SELECT pair1, pair2, pair3 FROM tab_2")
    triangles = cursor.fetchall()
    valid_triangles = []

    for pair1, pair2, pair3 in triangles:
        base1, quote1 = pair1.split("-")
        base2, quote2 = pair2.split("-")
        base3, quote3 = pair3.split("-")

        # –£—Å–ª–æ–≤–∏–µ 1: –∫–∞–∂–¥–∞—è –ø–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤–∞–ª—é—Ç—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        contains_conversion_currency = any(currency in TARGET_CURRENCIES for currency in [base1, quote1, base2, quote2, base3, quote3])

        # –£—Å–ª–æ–≤–∏–µ 2: –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –≤–∞–ª—é—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        last_pair_valid = base3 in TARGET_CURRENCIES and quote3 in TARGET_CURRENCIES
        
        # –£—Å–ª–æ–≤–∏–µ 3: –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ BTC
        second_valid_pair = base2 in TARGET_CURRENCIES2 and quote2 in TARGET_CURRENCIES2

        # –£—Å–ª–æ–≤–∏–µ 4: —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç
        if any(currency in EXCLUDED_CURRENCIES for currency in [base1, quote1, base2, quote2, base3, quote3]):
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫

        # –ï—Å–ª–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        if (contains_conversion_currency and last_pair_valid) or (second_valid_pair):
            valid_triangles.append((pair1, pair2, pair3))

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏
    cursor.execute("DELETE FROM tab_2")
    cursor.executemany("INSERT INTO tab_2 (pair1, pair2, pair3) VALUES (?, ?, ?)", valid_triangles)
    conn.commit()
    conn.close()    # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

    print(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(valid_triangles)} —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤.")

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä
def get_unique_pairs():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä –∏–∑ `tab_2`."""
    with sqlite3.connect("arbitrage.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT DISTINCT pair1 FROM tab_2 UNION SELECT DISTINCT pair2 FROM tab_2 UNION SELECT DISTINCT pair3 FROM tab_2")
        pairs = [row[0] for row in cursor.fetchall()]
    return pairs  # ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
pairs = get_unique_pairs()  # ‚úÖ –¢–µ–ø–µ—Ä—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –±–µ—Ä–µ—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
#print(pairs)

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ JSON-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
pairs = get_unique_pairs()
subscribe_message = {
    "op": "subscribe",
    "args": [{"channel": "books", "instId": pair} for pair in pairs]
}

def split_into_chunks(lst, chunk_size):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ `chunk_size`."""
    for i in range(0, len(lst), chunk_size):
        yield lst[i:i + chunk_size]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Websockets
async def websocket_handler(subscribe_message):
    retry_delay = 5  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    max_delay = 60   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

    while True:
        try:
            async with websockets.connect(
                OKX_WS_URL,
                ssl=ssl.create_default_context(cafile=certifi.where()),
                ping_interval=15,
                ping_timeout=10
            ) as ws:
                logging.error("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω")
                await ws.send(json.dumps(subscribe_message))

                async for message in ws:
                    await process_ws_message(message)

        except websockets.exceptions.ConnectionClosed as e:
            logging.error(f"‚ö†Ô∏è WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç (–∫–æ–¥ {e.code}): {e.reason}")
            if e.code == 1000:
                logging.error("‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è")
                break  # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —à—Ç–∞—Ç–Ω–æ, –≤—ã—Ö–æ–¥–∏–º

        except Exception as e:
            logging.error(f"üö® –û—à–∏–±–∫–∞ WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω: {e}")
            print("‚ùå –°–ö–†–ò–ü–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù –ò–ó-–ó–ê –û–®–ò–ë–ö–ò ‚ùå")  # –û–≥—Ä–æ–º–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ —Å –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º–æ–π
            break  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ

        logging.error(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫...")
        await asyncio.sleep(retry_delay)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–∫–∞—Ö, –Ω–æ –Ω–µ –±–æ–ª–µ–µ max_delay
        retry_delay = min(retry_delay * 2, max_delay)

async def process_ws_message(message):
    try:
        data = json.loads(message)
        if "arg" in data and "data" in data:
            pair = data["arg"]["instId"]
            bids = data["data"][0].get("bids", [])
            asks = data["data"][0].get("asks", [])

            bid_price = float(bids[0][0]) if bids else None
            bid_volume = float(bids[0][1]) if bids else None
            ask_price = float(asks[0][0]) if asks else None
            ask_volume = float(asks[0][1]) if asks else None

            if bid_price is not None and ask_price is not None:
                conn = sqlite3.connect("arbitrage.db")
                cursor = conn.cursor()
                cursor.execute(
                    """
                    UPDATE tab_2 
                    SET 
                        bid1 = CASE WHEN pair1 = ? THEN ? ELSE bid1 END,
                        ask1 = CASE WHEN pair1 = ? THEN ? ELSE ask1 END,
                        bid1_volume = CASE WHEN pair1 = ? THEN ? ELSE bid1_volume END,
                        ask1_volume = CASE WHEN pair1 = ? THEN ? ELSE ask1_volume END,

                        bid2 = CASE WHEN pair2 = ? THEN ? ELSE bid2 END,
                        ask2 = CASE WHEN pair2 = ? THEN ? ELSE ask2 END,
                        bid2_volume = CASE WHEN pair2 = ? THEN ? ELSE bid2_volume END,
                        ask2_volume = CASE WHEN pair2 = ? THEN ? ELSE ask2_volume END,

                        bid3 = CASE WHEN pair3 = ? THEN ? ELSE bid3 END,
                        ask3 = CASE WHEN pair3 = ? THEN ? ELSE ask3 END,
                        bid3_volume = CASE WHEN pair3 = ? THEN ? ELSE bid3_volume END,
                        ask3_volume = CASE WHEN pair3 = ? THEN ? ELSE ask3_volume END
                    WHERE pair1 = ? OR pair2 = ? OR pair3 = ?
                    """,
                    (
                        pair, bid_price, pair, ask_price, pair, bid_volume, pair, ask_volume, 
                        pair, bid_price, pair, ask_price, pair, bid_volume, pair, ask_volume, 
                        pair, bid_price, pair, ask_price, pair, bid_volume, pair, ask_volume,
                        pair, pair, pair
                    )
                )
                updated_rows = cursor.rowcount
                conn.commit()
                conn.close()


    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        print("\n" + "="*50)
        print("üö® –°–ö–†–ò–ü–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù –ò–ó-–ó–ê –û–®–ò–ë–ö–ò üö®".center(50))
        print("="*50 + "\n")
        sys.exit(1)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ 1

async def main():
    pairs = get_unique_pairs()
    chunk_size = max(1, len(pairs) // 3)  # ‚úÖ –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ 3 —á–∞—Å—Ç–∏
    tasks = []
    
    for chunk in split_into_chunks(pairs, chunk_size):
        subscribe_message = {
            "op": "subscribe",
            "args": [{"channel": "books", "instId": pair} for pair in chunk]
        }
        tasks.append(asyncio.create_task(websocket_handler(subscribe_message)))
    
    await asyncio.gather(*tasks)  # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ WebSocket-–ø–æ—Ç–æ–∫–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –≤ –ø–æ—Ç–æ–∫–µ
def analyze_triangles_thread():
    while True:
        analyze_triangles()
        time.sleep(UPDATE_INTERVAL)

# –ù–∞—Ö–æ–¥–∏—Ç –ø–∞—Ä—ã –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞—è —Ü–µ–Ω—ã –∏ –æ–±—å–µ–º—ã
def analyze_triangles():
    logging.info("–ù–∞—á–∞—Ç –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤")
    conn = sqlite3.connect("arbitrage.db")
    cursor = conn.cursor()
    
    cursor.execute("SELECT pair1, bid1, ask1, ask1_volume, pair2, bid2, ask2, bid2_volume, pair3, bid3, ask3 FROM tab_2")
    triangles = cursor.fetchall()
    
    results = []
    log_entries = []
    successful_arbitrages = []
    
    for pair1, bid1, ask1, ask1_volume, pair2, bid2, ask2, bid2_volume, pair3, bid3, ask3 in triangles:
        if None in (bid1, ask1, ask1_volume, bid2, ask2, bid2_volume, bid3, ask3):
            logging.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ {pair1} ‚Üí {pair2} ‚Üí {pair3} (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö bid/ask/volume)")
            continue
        
        required_ask1_volume = 200 / ask1
        required_bid2_volume = 200 / bid2

        if ask1_volume == 0 or bid2_volume == 0:
            continue
        
        if ask1_volume < required_ask1_volume or bid2_volume < required_bid2_volume:
            continue
        
        step1 = INITIAL_BALANCE / ask1
        step2 = step1 * bid2
        final_balance = step2 * bid3
        profit_percent = (final_balance - INITIAL_BALANCE) / INITIAL_BALANCE * 100
        
        status = "‚úÖ" if final_balance > INITIAL_BALANCE else "‚ùå"
        
        if final_balance > PROFIT_PERCENT:
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            log_entry = (f"[{current_time}]\n"
                         f"üîπ {pair1} ‚Üí {pair2} ‚Üí {pair3}\n"
                         f"   –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {final_balance:.2f} ({profit_percent:.2f}%) {status}üî•\n")
            log_entries.append(log_entry)
            
            successful_arbitrages.append(log_entry)
            results.append((pair1, bid1, ask1, pair2, bid2, ask2, pair3, bid3, ask3, final_balance))
    
    cursor.execute("DELETE FROM tab_3")
    if results:
        cursor.executemany("INSERT INTO tab_3 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", results)
    else:
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entries.append(f"[{current_time}] ‚ùå –ù–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π, —Ä–∞–±–æ—Ç–∞–µ–º –¥–∞–ª—å—à–µ.\n")
        logging.info("–ù–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ tab_3.")
    
    with open("arbitrage_log.txt", "a") as log_file:
        log_file.writelines(log_entries)
    
    if successful_arbitrages:
        with open("analise_arrbitrage.txt", "a") as arb_file:
            arb_file.writelines(successful_arbitrages)
    conn.commit()
    conn.close()
    


def generate_signature(timestamp, method, path, body, secret_key):
    message = f"{timestamp}{method}{path}{body}"
    signature = hmac.new(secret_key.encode(), message.encode(), digestmod="sha256").digest()
    return base64.b64encode(signature).decode()

os.environ["SSL_CERT_FILE"] = certifi.where()

# –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Websocket –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–ª–∞–Ω—Å—É –∏ —Å–ø–∏—Å–∫—É –æ—Ä–¥–µ—Ä–æ–≤
async def subscribe_private_ws():
    api_key, api_secret, passphrase = load_api_keys()
    ssl_context = ssl.create_default_context(cafile=certifi.where())

    retry_delay = 5  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    max_delay = 60   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

    while True:
        try:
            async with websockets.connect(
                OKX_PRIVAT_URL, ssl=ssl_context, timeout=10, ping_interval=15, ping_timeout=10
            ) as ws:
                logging.error("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –±–∞–ª–∞–Ω—Å–∞ –∏ –æ—Ä–¥–µ—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
                timestamp = str(int(time.time()))
                signature = generate_signature(timestamp, "GET", "/users/self/verify", "", api_secret)

                # üîπ 1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                auth_msg = {
                    "op": "login",
                    "args": [{
                        "apiKey": api_key,
                        "passphrase": passphrase,
                        "timestamp": timestamp,
                        "sign": signature
                    }]
                }
                logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {auth_msg}")
                await ws.send(json.dumps(auth_msg))

                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
                response = await ws.recv()
                logging.info(f"üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è): {response}")

                # üîπ 2. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –∏ –æ—Ä–¥–µ—Ä–∞
                subscribe_msg = {
                    "op": "subscribe",
                    "args": [
                        {"channel": "account"},  # –ë–∞–ª–∞–Ω—Å
                        {"channel": "orders", "instType": "SPOT"}  # –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
                    ]
                }
                logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {subscribe_msg}")
                await ws.send(json.dumps(subscribe_msg))

                # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                async for message in ws:
                    logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                    await process_private_ws_message(message)

        except websockets.exceptions.ConnectionClosed as e:
            logging.error(f"‚ö†Ô∏è WebSocket –±–∞–ª–∞–Ω—Å–∞ –∏ –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞–∫—Ä—ã—Ç (–∫–æ–¥ {e.code}): {e.reason}")
            if e.code == 1000:
                logging.error("‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è")
                break  # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —à—Ç–∞—Ç–Ω–æ, –≤—ã—Ö–æ–¥–∏–º

        except asyncio.TimeoutError:
            logging.error("‚è≥ –û—à–∏–±–∫–∞: WebSocket(–±–∞–ª–∞–Ω—Å–∞ –∏ –æ—Ä–¥–µ—Ä–æ–≤)-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (—Ç–∞–π–º–∞—É—Ç)")

        except Exception as e:
            logging.error(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ WebSocket –±–∞–ª–∞–Ω—Å–∞ –∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            print("‚ùå –°–ö–†–ò–ü–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù –ò–ó-–ó–ê –û–®–ò–ë–ö–ò ‚ùå")  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
            traceback.print_exc()
            break  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç

        logging.error(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –æ—Ä–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫...")
        await asyncio.sleep(retry_delay)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–∫–∞—Ö, –Ω–æ –Ω–µ –±–æ–ª–µ–µ max_delay
        retry_delay = min(retry_delay * 2, max_delay)

async def process_private_ws_message(message):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ WebSocket-–∞ """
    try:
        data = json.loads(message)
        if "arg" in data and "data" in data:
            channel = data["arg"]["channel"]
            
            conn = sqlite3.connect("arbitrage.db")
            cursor = conn.cursor()

            if channel == "account":
                logging.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...")

                for account_data in data.get("data", []):  # ‚úÖ –ò–∑–±–µ–≥–∞–µ–º KeyError
                    for balance in account_data.get("details", []):  # ‚úÖ –ò–∑–±–µ–≥–∞–µ–º KeyError
                        currency = balance["ccy"] 
                        available = float(balance.get("availBal", 0))
                        reserved = float(balance.get("frozenBal", 0))

                        logging.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {currency} | –î–æ—Å—Ç—É–ø–Ω–æ: {available} | –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {reserved}")

                        cursor.execute("""
                            INSERT INTO balances (currency, available, reserved) 
                            VALUES (?, ?, ?)
                            ON CONFLICT(currency) DO UPDATE 
                            SET available = excluded.available, reserved = excluded.reserved
                        """, (currency, available, reserved))

            elif channel == "orders":
                logging.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤...")
                for order in data.get("data", []):  # ‚úÖ –ò–∑–±–µ–≥–∞–µ–º KeyError
                    order_id = order["ordId"]
                    pair = order["instId"]
                    order_type = order["side"]
                    price = float(order["px"]) if order["px"] else None
                    quantity = float(order["sz"])
                    created_at = order["cTime"]

                    logging.info(f"üìú –û—Ä–¥–µ—Ä –æ–±–Ω–æ–≤–ª—ë–Ω: {order_id} | {pair} | {order_type} | –¶–µ–Ω–∞: {price} | –ö–æ–ª-–≤–æ: {quantity}")

                    cursor.execute("""
                        INSERT INTO open_orders (order_id, pair, type, price, quantity, created_at)
                        VALUES (?, ?, ?, ?, ?, ?)
                        ON CONFLICT(order_id) DO UPDATE 
                        SET price = excluded.price, quantity = excluded.quantity
                    """, (order_id, pair, order_type, price, quantity, created_at))
            
            conn.commit()
            conn.close()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        traceback.print_exc()

def run_ws():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(subscribe_private_ws())


balances = {}  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à –±–∞–ª–∞–Ω—Å–æ–≤
API_KEY, API_SECRET, PASSPHRASE = load_api_keys()


async def get_balance(currency):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"""
    conn = sqlite3.connect("arbitrage.db")
    cursor = conn.cursor()
    cursor.execute("SELECT available FROM balances WHERE currency = ?", (currency,))
    result = cursor.fetchone()
    conn.close()
    return float(result[0]) if result else 0.0  # –ï—Å–ª–∏ –≤–∞–ª—é—Ç—ã –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0

async def wait_for_order(order_id):
    """–ñ–¥—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –ø–æ `order_id`, –ø—Ä–æ–≤–µ—Ä—è—è —Ç–∞–±–ª–∏—Ü—É `open_orders`"""
    while True:
        conn = sqlite3.connect("arbitrage.db")
        cursor = conn.cursor()
        cursor.execute("SELECT order_id FROM open_orders WHERE order_id = ?", (order_id,))
        open_order = cursor.fetchone()
        conn.close()

        if not open_order:
            logging.info(f"‚úÖ –û—Ä–¥–µ—Ä {order_id} –∏—Å–ø–æ–ª–Ω–µ–Ω!")
            return True  # –û—Ä–¥–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω
        await asyncio.sleep(0.2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É


balances = {}  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à –±–∞–ª–∞–Ω—Å–æ–≤
API_KEY, API_SECRET, PASSPHRASE = load_api_keys()

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ OKX
def generate_signature(timestamp, method, request_path, body, api_secret):
    message = f"{timestamp}{method}{request_path}{body}"
    signature = hmac.new(api_secret.encode(), message.encode(), digestmod="sha256").digest()
    return base64.b64encode(signature).decode()


async def place_order(pair, side, quantity):
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –ø–æ WebSocket, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ä–¥–µ—Ä.
    """
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –¥–ª—è WebSocket
        ssl_context = ssl.create_default_context()
        ssl_context.load_verify_locations(certifi.where())

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        timestamp = str(int(time.time()))  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        request_path = "/users/self/verify"  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        method = "GET"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ —Ä–∞–±–æ—á–µ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É
        sign = generate_signature(timestamp, method, request_path, "", API_SECRET)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏–Ω–∞ (–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        login_msg = {
            "op": "login",
            "args": [{
                "apiKey": API_KEY,
                "passphrase": PASSPHRASE,
                "timestamp": timestamp,
                "sign": sign
            }]
        }

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        order_msg = {
            "id": "order1",  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
            "op": "order",
            "args": [{
                "instId": pair,
                "tdMode": "cash",   # –°–ø–æ—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
                "side": side,       # "buy" –∏–ª–∏ "sell"
                "ordType": "market", # –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä,
                "sz": str(quantity)
            }]
        }

        async with websockets.connect(OKX_PRIVAT_URL, ssl=ssl_context) as ws:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–Ω
            await ws.send(json.dumps(login_msg, separators=(",", ":")))
            login_response = await ws.recv()
            logging.info(f"üîí –û—Ç–≤–µ—Ç –ª–æ–≥–∏–Ω–∞: {login_response}")

            if '"event":"error"' in login_response:
                logging.error("üö® –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å API-–∫–ª—é—á–∏ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É.")
                return None
            
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä
            await ws.send(json.dumps(order_msg, separators=(",", ":")))
            order_response = await ws.recv()
            logging.info(f"üì© –û—Ç–≤–µ—Ç –æ—Ä–¥–µ—Ä–∞: {order_response}")

            return order_response

    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –≤ WebSocket –æ—Ä–¥–µ—Ä–µ: {e}")
        return None
    

# ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
async def triangular_arbitrage():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    while True:
        try:
            conn = sqlite3.connect("arbitrage.db")
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM tab_3 ORDER BY final_balance DESC LIMIT 1")
            row = cursor.fetchone()
            conn.close()
            
            if not row:
                logging.info("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")
                await asyncio.sleep(2)
                continue
            
            pair1, bid1, ask1, pair2, bid2, ask2, pair3, bid3, ask3, final_balance = row
            logging.info(f"üîç –í—ã–±—Ä–∞–Ω —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫: {pair1}, {pair2}, {pair3} —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º {final_balance}")

            # üîÑ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ `tab_2`
            conn = sqlite3.connect("arbitrage.db")
            cursor = conn.cursor()
            cursor.execute("SELECT ask1 FROM tab_2 WHERE pair1 = ?", (pair1,))
            ask1 = float(cursor.fetchone()[0])

            cursor.execute("SELECT bid2 FROM tab_2 WHERE pair2 = ?", (pair2,))
            bid2 = float(cursor.fetchone()[0])

            cursor.execute("SELECT bid3 FROM tab_2 WHERE pair3 = ?", (pair3,))
            bid3 = float(cursor.fetchone()[0])
            conn.close()

            # üîÑ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –∏–∑ –ë–î
            base1, quote1 = pair1.split("-")
            base2, quote2 = pair2.split("-")
            base3, quote3 = pair3.split("-")

            # ‚úÖ **–ü–µ—Ä–≤–∞—è —Å–¥–µ–ª–∫–∞: BUY `pair1`**
            balance_quote1 = await get_balance(quote1)
            logging.info(f"üí∞ –ë–∞–ª–∞–Ω—Å {quote1}: {balance_quote1}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {ORDER_SIZE}")

            if quote1 in TARGET_CURRENCIES and balance_quote1 > ORDER_SIZE:
                amount1 = ORDER_SIZE 
                logging.info(f"üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –æ–±—ä—ë–º –ø–µ—Ä–≤–æ–π —Å–¥–µ–ª–∫–∏: {amount1} {base1} –ø–æ —Ü–µ–Ω–µ {ask1}")

                if amount1 < MIN_TRADE_SIZE:
                    logging.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª—ã–π –æ—Ä–¥–µ—Ä: {amount1} < {MIN_TRADE_SIZE}")
                    continue

                order_id = await place_order(pair1, "buy", amount1)
    
                if order_id:
                    logging.info(f"‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É {pair1} —Å–æ–∑–¥–∞–Ω: {order_id}")
                else:
                    logging.error(f"üö® –û—à–∏–±–∫–∞! –ë–∏—Ä–∂–∞ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –æ—Ä–¥–µ—Ä –Ω–∞ {pair1}.")
                    continue

                if not await wait_for_order(order_id):
                    logging.error(f"üö® –û—Ä–¥–µ—Ä {order_id} –Ω–∞ {pair1} –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è!")
                    continue
            else:
                logging.error(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {quote1} –¥–ª—è –ø–µ—Ä–≤–æ–π —Å–¥–µ–ª–∫–∏")
                continue

            # ‚úÖ **–í—Ç–æ—Ä–∞—è —Å–¥–µ–ª–∫–∞: SELL `pair2`**
            balance_base1 = balance_quote1 / bid2 * (1 - 0.0011)
            if balance_base1 < MIN_TRADE_SIZE:
                logging.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å {base1} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {balance_base1}")
                continue

            order_id = await place_order(pair2, "sell", balance_base1)
            if not await wait_for_order(order_id):
                continue

            # ‚úÖ **–¢—Ä–µ—Ç—å—è —Å–¥–µ–ª–∫–∞: SELL `pair3`**
            balance_base3 = balance_base1 * bid2 * (1 - 0.0011)
            if balance_base3 < MIN_TRADE_SIZE:
                logging.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å {base2} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {balance_base3}")
                continue

            order_id = await place_order(pair3, "sell", balance_base3)
            if not await wait_for_order(order_id):
                continue

            logging.info("üèÜ ‚úÖ –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print("üèÜ ‚úÖ –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –∑–∞–≤–µ—Ä—à–µ–Ω!")

        except Exception as e:
            logging.error(f"üö® –û—à–∏–±–∫–∞ –≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ: {e}")
            await asyncio.sleep(2)  # ‚úÖ –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –ø–æ–¥–æ–∂–¥–∞—Ç—å 


if __name__ == "__main__":
    pairs = fetch_trading_pairs()
    find_triangular_arbitrage()
    filter_triangles()
    get_unique_pairs()
    threading.Thread(target=lambda: asyncio.run(main()), daemon=True).start()
    threading.Thread(target=lambda: asyncio.run(subscribe_private_ws()), daemon=True).start()
    threading.Thread(target=analyze_triangles_thread, daemon=True).start()
    threading.Thread(target=run_ws, daemon=True).start()
    try:
        print("üí° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞... üü°")
        asyncio.run(triangular_arbitrage())
    except KeyboardInterrupt:
        print("\nüõë –°–∫—Ä–∏–ø—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    finally:
        print("‚ú® –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –î–æ –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫! üöÄ")
    while True:
        time.sleep(10)
